USE sys;
DROP DATABASE Project;

CREATE DATABASE Project;
USE Project;

CREATE TABLE ViewerType (
    TypeName VARCHAR(10) NOT NULL,
    Discount DECIMAL(15, 2) NOT NULL,
    CONSTRAINT PK_TypeName PRIMARY KEY (TypeName)
);

CREATE TABLE Viewer (
    ViewerID INT NOT NULL AUTO_INCREMENT,
    ViewerAge INT NOT NULL,
    ViewerType VARCHAR(10) NOT NULL,
    CONSTRAINT PK_ViewerID PRIMARY KEY (ViewerID),
    CONSTRAINT FK_ViewerTypeID FOREIGN KEY (ViewerType) REFERENCES ViewerType(TypeName)
);

CREATE TABLE Movie (
    MovieID INT NOT NULL AUTO_INCREMENT,
    MovieTitle VARCHAR(30) NOT NULL,
    MovieCategory ENUM('G', 'PG', 'SPG') NOT NULL,
    MovieDuration TIME NOT NULL,
    MoviePrice DECIMAL(15, 2) NOT NULL, 
    CONSTRAINT PK_MovieID PRIMARY KEY (MovieID)
);

CREATE TABLE CinemaRoom (
    RoomNo VARCHAR(15) NOT NULL,
    Seats INT NOT NULL,
    CONSTRAINT PK_RoomNo PRIMARY KEY (RoomNo)
);

CREATE TABLE Schedule (
    ScheduleID INT NOT NULL AUTO_INCREMENT,
    ScreeningTime DATETIME NOT NULL UNIQUE,
    SeatsTaken INT NOT NULL DEFAULT 0, -- will be incremented <= seats
    MovieID INT NOT NULL,
    RoomNo VARCHAR(15) NOT NULL,
    CONSTRAINT PK_ScheduleID PRIMARY KEY (ScheduleID),
    CONSTRAINT FK_MovieID FOREIGN KEY (MovieID) REFERENCES Movie(MovieID),
    CONSTRAINT FK_RoomNo FOREIGN KEY (RoomNo) REFERENCES CinemaRoom(RoomNo)
);

CREATE TABLE Ticket (
    TicketID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    TicketPrice DECIMAL(15, 2) NOT NULL, -- Calculated as TicketPrice = MoviePrice - (MoviePrice * ViewerDiscount) - the input of this data will be automated using java function
    ScheduleID INT NOT NULL, -- if seatsTaken > seats prompt a message that seats is fully ocuppied and choose another schedule
    ViewerID INT NOT NULL,
    CONSTRAINT FK_ScheduleID FOREIGN KEY (ScheduleID) REFERENCES Schedule(ScheduleID),
    CONSTRAINT FK_ViewerID FOREIGN KEY (ViewerID) REFERENCES Viewer(ViewerID)
);

CREATE TRIGGER UpdateTicketPrice
AFTER UPDATE ON Viewer
FOR EACH ROW
BEGIN
    IF NEW.ViewerType <> OLD.ViewerType THEN
        UPDATE Ticket
        SET TicketPrice = (SELECT MoviePrice - (MoviePrice * Discount) FROM Movie, ViewerType WHERE Movie.MovieID = Ticket.ScheduleID AND ViewerType.TypeName = NEW.ViewerType) 
        WHERE ViewerID = NEW.ViewerID;
    END IF;
END;

INSERT INTO ViewerType (TypeName, Discount)
VALUES ('Normal', 0.00),
       ('Kid', 0.05),
       ('Student', 0.10),
       ('Senior', 0.50),
       ('PWD', 0.20);

INSERT INTO Viewer (ViewerType, ViewerAge)
VALUES ('Normal', 18),
       ('Kid', 10),
       ('Student', 16),
       ('PWD', 20),
       ('Senior', 60);

INSERT INTO Movie (MovieTitle, MovieCategory, MovieDuration, MoviePrice)
VALUES ('Jumanji', 'G', '02:00:00', 250),
       ('Azkaban', 'PG', '02:00:00', 350),
       ('Ring of Fire', 'PG', '02:00:00', 450),
       ('Testing the Water', 'SPG', '02:00:00', 550),
       ('Love is Blind', 'SPG', '02:00:00', 650);

INSERT INTO CinemaRoom
VALUES ('Room 1', 10),
       ('Room 2', 20),
       ('Room 3', 30),
       ('Room 4', 40),
       ('Room 5', 1);
       
INSERT INTO Schedule (ScreeningTime, SeatsTaken, MovieID, RoomNo)
VALUES ('2023-01-01 10:00:00', 3, 1, "Room 1"),
       ('2023-01-01 12:15:00', 0, 2, "Room 1"),
       ('2023-01-01 14:30:00', 0, 3, "Room 1"),
       ('2023-02-01 16:45:00', 2, 4, "Room 1"),
       ('2023-02-01 19:00:00', 0, 5, "Room 5");

INSERT INTO Ticket (TicketPrice, ScheduleID, ViewerID)
VALUES (250.00, 1, 1),
       (237.50, 1, 2),
       (225.00, 1, 3),
       (440.00, 4, 4),
       (225.00, 4, 5);

SELECT ViewerID, ViewerAge, ViewerType, Discount FROM Viewer INNER JOIN ViewerType ON ViewerType = TypeName;
SELECT * FROM Movie;
SELECT * FROM CinemaRoom;
SELECT * FROM Schedule;
SELECT * FROM Ticket;

-- Report Generator
SELECT T.TicketID, DATE_FORMAT(S.ScreeningTime, '%M %e, %Y - %h:%i:%s %p') AS ScreeningDateTime, C.RoomNo, M.MovieTitle, M.MovieCategory, M.MovieDuration, V.ViewerType, V.ViewerAge, M.MoviePrice, CONCAT(Vt.Discount * 100, '%') AS Discount, T.TicketPrice
FROM Ticket T
JOIN Schedule S ON T.ScheduleID = S.ScheduleID
JOIN Movie M ON S.MovieID = M.MovieID
JOIN Viewer V ON T.ViewerID = V.ViewerID
JOIN ViewerType Vt ON V.ViewerType = Vt.TypeName
JOIN CinemaRoom C ON C.RoomNo = S.RoomNo;
-- WHERE MONTH(S.ScreeningTime) = 1 
--     AND YEAR(S.ScreeningTime) = 2023;

SELECT S.ScheduleID, CONCAT(S.SeatsTaken, '/', C.Seats) AS OccupiedSeats,
       DATE_FORMAT(S.ScreeningTime, '%M %e, %Y - %h:%i:%s %p') AS ScreeningDateTime,
       C.RoomNo,
       M.MovieTitle,
       M.MovieCategory,
       M.MovieDuration
FROM Schedule S
JOIN Movie M ON S.MovieID = M.MovieID
JOIN CinemaRoom C ON C.RoomNo = S.RoomNo;
